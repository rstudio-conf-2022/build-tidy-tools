---
title: "ðŸ“¦ <br>Building tidy tools"
subtitle: "Day 2 Session 3: Tidy Eval"
author: "Emma Rand and Ian Lyttle"
date: "<br>ðŸ”— [rstd.io/btt](https://rstd.io/btt)"
format:
  revealjs: 
    theme: [simple, emma.scss]
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: <https://rstd.io/btt>
    margin: 0.07
    code-link: true
    code-line-numbers: false
execute:
  echo: true
  eval: false
bibliography: references.bib
editor: source
---

## Learning objectives 

At the end of this section you will be able to:

- build functions that call tidyverse functions, using *bare-name* arguments:
  - designed for interactive use, i.e. like `dplyr::filter()` 
- understand terms: data masking, tidy select, dynamic dots
- recognize other ways to use tidy eval:
  - functions that call tidyverse functions using *string-based* arguments, i.e. for use with Shiny.
  - correspondence with techniques used for *bare-name* arguments.

## Motivation for tidy eval

Tidy eval (and non-standard evaluation generally in R) exists so that we can refer to data columns using bare names.

```r
dplyr::filter(mtcars, cyl == 4)
```

. . .

```python
# python, using pandas
mtcars.query('cyl == 4')
```

. . . 

 - It makes things easier if you are working interactively.
 - It makes things more interesting if you are writing functions. 

. . . 
 
Welcome to *more interesting*.

## Families of tidy-eval arguments

There are two families of tidy-eval arguments:

. . .

 - **data-masking**: evaluate variables in context of data frame
 
    ```r
    mtcars |>
      dplyr::mutate(wt_kg = wt * 1000 / 2.2)
    ```
    
. . . 

 - **tidy-select**: specify columns within a data frame
 
   ```r
   mtcars |>
     dplyr::select(starts_with("w"))
   ```
   
## Ways to express tidy-eval 

. . .

 - using bare names, what we do in interactive programming:
 
    ```r
    mtcars |>
      dplyr::mutate(wt_kg = wt * 1000 / 2.2)
    ```

. . .

  - using strings, useful for Shiny :
  
    ```r
    mtcars |>
      dplyr::mutate("wt_kg" := .data[["wt"]] * 1000 / 2.2)
    ```

. . .

Here, we focus mostly on interactive programming.

## Goal

Write functions that:

 - call tidyverse functions, e.g. `dplyr::filter()`
 - "look and feel" like tidyverse functions:
   - your users can call using bare names

. . . 

Out of scope:

 - underlying theory of quasiquotation, i.e. `rlang::quo()`, `rlang::enquo()`, `rlang::eval_tidy()` 

## Pass the dots

This is the simplest possible solution. 

. . .

 - If the tidyverse function you're using takes `...` as an argument,

. . .

 - and that's what you want to pass along, 

. . . 
 
then you can **pass the dots**.

```r
my_select <- function(.data, ...) {
  dplyr::select(.data, ...)
}
```

## Your turn `"2.3.1"`



. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.1")`
<hr>

. . . 

*No* new files.

. . .

## Pass the dots to `filter()` results

In `uss_get_matches()`:

- Add `...` to the formal arguments.

- Pass the dots to `dplyr::filter()`.

- Document: 

  - use `#' @inheritParams dplyr::filter` 
  - add example
  - add to package vignette

- Add test (`usethis::use_test()`)

- `devtools::check()`

## Pronouns: `.data`, `.env`

```r
dplyr::filter(mtcars, cyl == 4) |> nrow()
```
. . .

```
[1] 11
```

<hr>

. . .

```r
cyl <- 4
dplyr::filter(mtcars, cyl == cyl) |> nrow()
```
. . .

```
[1] 32
```

<hr>

. . .

```r
library("rlang")
cyl <- 4
dplyr::filter(mtcars, .data$cyl == .env$cyl) |> nrow()
```

. . .

```
[1] 11
```

## Pronouns

The `.data` and `.env` pronouns are provided by {rlang}.

. . . 

For *data-masking* functions, make explicit how to evaluate variables.

. . .

To use them in your package:

```r
# we have .data already
usethis::use_import_from("rlang", c(".data", ".env"))
```

## Your turn `"2.3.2"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.2")`
<hr>

. . . 
 
Get new files, `btt22::btt_get("2.3.2")`:

 - `teams-matches.R`
 - `test-teams-matches.R`

Go through what code does.

. . .

If you have not already:

`usethis::use_import_from("rlang", ".env")`

## Use `.env` pronoun

```r
at_home <- FALSE

teams_matches_visitor <-
  data_matches |>
  dplyr::rename(
    team = "visitor",
    opponent = "home",
    goals_against = "goals_home",
    goals_for = "goals_visitor"
  ) |>
  dplyr::mutate(at_home = FALSE)
```

- instead of `FALSE`, use `.env$at_home`.

- `devtools::check()`.

## Splicing: `!!!`

Used to splice a list or vector into a `...` argument.

. . .

If you know JavaScript, it's like the destructuring operator.

. . .

It works only with [*dynamic dots*](https://rlang.r-lib.org/reference/dyn-dots.html) (a tidyverse construct).

. . . 

```r
mtcars |>
  dplyr::rename(mpg = "new_mpg", cyl = "new_cyl")
```

. . .

```r
new_names <- c(mpg = "new_mpg", cyl = "new_cyl")

mtcars |>
  dplyr::rename(!!!new_names)
```

. . .

Remember:`!!!` reflects `...`


## Your turn `"2.3.3"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.3")`
<hr>

. . . 

*No* new files.

## Splice renaming

```r
teams_matches_home <-
  data_matches |>
  dplyr::rename(
    team = "home",
    opponent = "visitor",
    goals_for = "goals_home",
    goals_against = "goals_visitor"
  ) |>
  dplyr::mutate(at_home = TRUE)
```

- look at `rename_home()` and `rename_visitor()`.

- Use `!!!` with `teams_matches_home()`, `_visitor()`.

- `devtools::check()`.

## New columns

With [*dynamic dots*](https://rlang.r-lib.org/reference/dyn-dots.html) you can name new columns using variables.

. . .

```r
prefix <- "new"

mtcars |>
  dplyr::rename("{prefix}_mpg" := .data$mpg)
```

. . .

Two things to keep in mind:

- left side of expression is a {glue}-enabled string.
- operator is `:=`, not `=`. 

. . . 

To use in your package:

```r
usethis::use_import_from("rlang", ":=")
```

## Your turn `"2.3.4"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.4")`
<hr>

. . . 

*No* new files.

## Naming columns

```r
name_of_at_home <- "at_home"
teams_matches_visitor <-
  data_matches |>
  dplyr::rename(!!!rename_visitor()) |>
  dplyr::mutate(at_home = FALSE)
```

- use `name_of_at_home` to name column in `mutate()`

- `devtools::check()`

Remember:

- left side of expression is a {glue}-enabled string
- operator is `:=`, not `=`

## `dplyr::across()`: super useful 

- used inside *data-masking* verbs, e.g. `summarise()`

- specify:

  - which columns to consider, using *tidy-select*
  
  - what function(s), if any, to apply

. . .

```r
mtcars |>
  dplyr::group_by(dplyr::across("cyl")) |>
  dplyr::summarise(
    dplyr::across(c("mpg", "disp"), mean)
  )
```

## Tidy-select and ambiguity

```r
library("dplyr")

mtcars |> select(cyl) |> glimpse()
```

. . .

```r
placeholder <- c("wt", "mpg")
mtcars |> select(placeholder) |> glimpse()
```

. . . 

```r
cyl <- c("wt", "mpg")
mtcars |> select(cyl) |> glimpse()
```

. . .

```r
mtcars |> select(all_of(cyl)) |> glimpse()
```

## `all_of()`, `any_of()`

Exported by {dplyr}; part of {tidyselect}

Used to disambiguate external- vector of column names:

```r
placeholder <- c("wt", "mpg", "not_in_mtcars")
```

. . .

`all_of()` is strict:

```r
mtcars |> select(all_of(placeholder)) |> glimpse()
```

. . .


`any_of()` is permissive:

```r
mtcars |> select(any_of(placeholder)) |> glimpse()
```


## Our turn `"2.3.5"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.5")`
<hr>

. . . 

*No* new files.


## `uss_make_teams_matches()`

Let's add some code near the end to arrange the rows:

```r
result <-
  teams_matches_home |>
  dplyr::bind_rows(teams_matches_visitor) |>
  dplyr::select(cols_teams_matches()) |>
  dplyr::arrange(
    dplyr::across(
      c("country", "tier", "season", "team", "date")
    )
  )
```

. . .

Not using variable-names in *tidy-select* that could be confused for column-names; we don't need `all_of()`.

## Accepting new snapshot

- `devtools::test()` changes the snapshot test

. . .

- `snapshot_review('teams-matches')`

. . .

::: {layout="[[1,1]]"}
![](images/snapshot-matches.png){fig-alt="Accepting change to snapshot test"}

- accept the change

- `devtools::check()`
:::

## Your turn `"2.3.6"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.6")`
<hr>

. . . 
 
Get new files, `btt22::btt_get("2.3.6")`:

- `points.R`
- `seasons.R`
- `test-points.R`
- `test-seasons.R`

Go through what code does.

## `uss_make_seasons_final()`

- same args as `uss_make_seasons_cumulative()`
  ```r
  #' @rdname uss_make_seasons_cumulative
  #' @export
  ```
- same validation, test by uncommenting
- use `dplyr::summarise()`, vs. `dplyr::mutate()`
- `sum` quantities, rather than `cumsum`
- `summarise()` the `date` differently 
- add example, add to vignette
- `devtools::check()`

## Curly-curly: `{{}}`

glue lets you interpolate strings:

```r
greet <- function(name) {
  glue::glue("Hello {name}")
}
```

```r
greet("there")
```
 
. . .

Tidy eval lets you interpolate arguments:

```r
mutate_greet <- function(.data, greeting) {
  .data |>
    dplyr::mutate(greeting = {{ greeting }})
}
```

## Try out greeting functions

```r
library("palmerpenguins")
mutate_greet(penguins, species)
```

. . .

```r
mutate_greet(penguins, paste(species, island))
```

. . .


```r
mutate_greet(
  penguins, 
  paste(species, island) |> greet()
)
```

## Curly-curly, revisited

```r
mutate_greet <- function(.data, greeting) {
  .data |>
    dplyr::mutate(greeting = {{ greeting }})
}
```

`{{}}`: 

- freezes the expression, capturing context
- delays evaluation
- function you call must be capable
- tidyverse *data-masking* and *tidy-select* functions are capable

## Your turn `"2.3.7"`

. . .

<hr>
**Only** *if needed*, `btt22::btt_reset_hard("2.3.7")`
<hr>

. . . 
 
Get new files, `btt22::btt_get("2.3.7")`:

- `points.R`, `seasons.R`
- `test-points.R`, `test-seasons.R`

`usethis::use_package("ggplot2")`

Go through what code does, esp. snapshot function.

## `uss_plot_seasons_tiers()` 

Add argument `aes_y` to function:

  - make default value `.data$wins`
  - document: `#' @param aes_y`
  - in function, modify `aes(y = .data$wins)` using `{{}}`
  - uncomment test, `devtools::test()`
  - add to package vignette
  - `devtools::check()`

## Our turn

In `uss_plot_seasons_tiers()`:

```r
ggplot2::geom_point(
  ggplot2::aes(
    x = .data$season,
    y = {{ aes_y }},
  ),
  color = "#333333" # use something like #111111
) +
```

. . . 

- `devtools::test()`

- `testthat::snapshot_review('plot/')`

- accept changes (or not), change back (or not)

## Summary

There are a lot of tidy-eval tools:

- know if you are using a *data-masking* or *tidy-select* function.

. . .

- *data-masking* function using *tidy-select* syntax: `across()` 

. . .

- to move a bunch of arguments, pass the dots, `...`

. . .

- to splice a list (or vector) into *dynamic-dots*, use `!!!`

. . . 
  
- to interpolate a single argument, use `{{}}`


## Summary: disambiguation

For *data-masking* functions, use `.data`, `.env` pronouns:

```r
library("dplyr")

cyl <- 4
mtcars |> filter(.data$cyl == .env$cyl) 
```
  
. . .

For *tidy-select* functions, use `all_of()`, `any_of()`:

```r
cyl <- c("mpg", "wt")
mtcars |> select(all_of(cyl))
```


## Additional material {.smaller}

```{r}
#| eval: true
#| echo: false
vembedr::embed_youtube("2BXPLnLMTYo", height = 400) 
```

Jenny Bryan motivates tidy eval at rstudio::conf(2019):

- `01:30` - scoped verbs, e.g. `mutate_at()`, now: `across()`
- `16:18` - `enquo()` and `!!`, now: `{{}}`

## Additional material

```{r}
#| eval: true
#| echo: false
vembedr::embed_youtube("SW_TUkPXSmA", height = 400) 
```

Lionel Henry talks about data-masking and tidy-select at rstudio::conf(2020).

## Additional material

```{r}
#| eval: true
#| echo: false
vembedr::embed_youtube("nERXS3ssntw", height = 400) 
```

Hadley gives a five-minute tour of the next layer of the tidy-eval onion.


## References
